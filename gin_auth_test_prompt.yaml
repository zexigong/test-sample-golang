messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given Go code files of the repository. Make sure the tests
    can be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: gin\nTest File Path: gin\\auth_test.go\\\
    auth_test.go\nProject Programming Language: Go\nTesting Framework: go testing\n\
    ### Source File Content\n### Source File: gin\\auth_test.go\\source_files\\auth.go\n\
    // Copyright 2014 Manu Martinez-Almeida. All rights reserved.\n// Use of this\
    \ source code is governed by a MIT style\n// license that can be found in the\
    \ LICENSE file.\n\npackage gin\n\nimport (\n\t\"crypto/subtle\"\n\t\"encoding/base64\"\
    \n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin/internal/bytesconv\"\
    \n)\n\n// AuthUserKey is the cookie name for user credential in basic auth.\n\
    const AuthUserKey = \"user\"\n\n// AuthProxyUserKey is the cookie name for proxy_user\
    \ credential in basic auth for proxy.\nconst AuthProxyUserKey = \"proxy_user\"\
    \n\n// Accounts defines a key/value for user/pass list of authorized logins.\n\
    type Accounts map[string]string\n\ntype authPair struct {\n\tvalue string\n\t\
    user  string\n}\n\ntype authPairs []authPair\n\nfunc (a authPairs) searchCredential(authValue\
    \ string) (string, bool) {\n\tif authValue == \"\" {\n\t\treturn \"\", false\n\
    \t}\n\tfor _, pair := range a {\n\t\tif subtle.ConstantTimeCompare(bytesconv.StringToBytes(pair.value),\
    \ bytesconv.StringToBytes(authValue)) == 1 {\n\t\t\treturn pair.user, true\n\t\
    \t}\n\t}\n\treturn \"\", false\n}\n\n// BasicAuthForRealm returns a Basic HTTP\
    \ Authorization middleware. It takes as arguments a map[string]string where\n\
    // the key is the user name and the value is the password, as well as the name\
    \ of the Realm.\n// If the realm is empty, \"Authorization Required\" will be\
    \ used by default.\n// (see http://tools.ietf.org/html/rfc2617#section-1.2)\n\
    func BasicAuthForRealm(accounts Accounts, realm string) HandlerFunc {\n\tif realm\
    \ == \"\" {\n\t\trealm = \"Authorization Required\"\n\t}\n\trealm = \"Basic realm=\"\
    \ + strconv.Quote(realm)\n\tpairs := processAccounts(accounts)\n\treturn func(c\
    \ *Context) {\n\t\t// Search user in the slice of allowed credentials\n\t\tuser,\
    \ found := pairs.searchCredential(c.requestHeader(\"Authorization\"))\n\t\tif\
    \ !found {\n\t\t\t// Credentials doesn't match, we return 401 and abort handlers\
    \ chain.\n\t\t\tc.Header(\"WWW-Authenticate\", realm)\n\t\t\tc.AbortWithStatus(http.StatusUnauthorized)\n\
    \t\t\treturn\n\t\t}\n\n\t\t// The user credentials was found, set user's id to\
    \ key AuthUserKey in this context, the user's id can be read later using\n\t\t\
    // c.MustGet(gin.AuthUserKey).\n\t\tc.Set(AuthUserKey, user)\n\t}\n}\n\n// BasicAuth\
    \ returns a Basic HTTP Authorization middleware. It takes as argument a map[string]string\
    \ where\n// the key is the user name and the value is the password.\nfunc BasicAuth(accounts\
    \ Accounts) HandlerFunc {\n\treturn BasicAuthForRealm(accounts, \"\")\n}\n\nfunc\
    \ processAccounts(accounts Accounts) authPairs {\n\tlength := len(accounts)\n\t\
    assert1(length > 0, \"Empty list of authorized credentials\")\n\tpairs := make(authPairs,\
    \ 0, length)\n\tfor user, password := range accounts {\n\t\tassert1(user != \"\
    \", \"User can not be empty\")\n\t\tvalue := authorizationHeader(user, password)\n\
    \t\tpairs = append(pairs, authPair{\n\t\t\tvalue: value,\n\t\t\tuser:  user,\n\
    \t\t})\n\t}\n\treturn pairs\n}\n\nfunc authorizationHeader(user, password string)\
    \ string {\n\tbase := user + \":\" + password\n\treturn \"Basic \" + base64.StdEncoding.EncodeToString(bytesconv.StringToBytes(base))\n\
    }\n\n// BasicAuthForProxy returns a Basic HTTP Proxy-Authorization middleware.\n\
    // If the realm is empty, \"Proxy Authorization Required\" will be used by default.\n\
    func BasicAuthForProxy(accounts Accounts, realm string) HandlerFunc {\n\tif realm\
    \ == \"\" {\n\t\trealm = \"Proxy Authorization Required\"\n\t}\n\trealm = \"Basic\
    \ realm=\" + strconv.Quote(realm)\n\tpairs := processAccounts(accounts)\n\treturn\
    \ func(c *Context) {\n\t\tproxyUser, found := pairs.searchCredential(c.requestHeader(\"\
    Proxy-Authorization\"))\n\t\tif !found {\n\t\t\t// Credentials doesn't match,\
    \ we return 407 and abort handlers chain.\n\t\t\tc.Header(\"Proxy-Authenticate\"\
    , realm)\n\t\t\tc.AbortWithStatus(http.StatusProxyAuthRequired)\n\t\t\treturn\n\
    \t\t}\n\t\t// The proxy_user credentials was found, set proxy_user's id to key\
    \ AuthProxyUserKey in this context, the proxy_user's id can be read later using\n\
    \t\t// c.MustGet(gin.AuthProxyUserKey).\n\t\tc.Set(AuthProxyUserKey, proxyUser)\n\
    \t}\n}\n\n### Source File Dependency Files Content\n### Dependency File: gin\\\
    auth_test.go\\dependent_files\\bytesconv.go\n// Copyright 2023 Gin Core Team.\
    \ All rights reserved.\n// Use of this source code is governed by a MIT style\n\
    // license that can be found in the LICENSE file.\n\npackage bytesconv\n\nimport\
    \ (\n\t\"unsafe\"\n)\n\n// StringToBytes converts string to byte slice without\
    \ a memory allocation.\n// For more details, see https://github.com/golang/go/issues/53003#issuecomment-1140276077.\n\
    func StringToBytes(s string) []byte {\n\treturn unsafe.Slice(unsafe.StringData(s),\
    \ len(s))\n}\n\n// BytesToString converts byte slice to string without a memory\
    \ allocation.\n// For more details, see https://github.com/golang/go/issues/53003#issuecomment-1140276077.\n\
    func BytesToString(b []byte) string {\n\treturn unsafe.String(unsafe.SliceData(b),\
    \ len(b))\n}\n\nOutput the complete test file, code only, no explanations.\n###\
    \ Time\nCurrent time: 2025-03-23 23:52:34\n"
  role: user
