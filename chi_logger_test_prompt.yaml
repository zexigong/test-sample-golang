messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given Go code files of the repository. Make sure the tests
    can be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: chi\nTest File Path: chi\\logger_test.go\\\
    logger_test.go\nProject Programming Language: Go\nTesting Framework: go testing\n\
    ### Source File Content\n### Source File: chi\\logger_test.go\\source_files\\\
    logger.go\npackage middleware\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"log\"\
    \n\t\"net/http\"\n\t\"os\"\n\t\"runtime\"\n\t\"time\"\n)\n\nvar (\n\t// LogEntryCtxKey\
    \ is the context.Context key to store the request log entry.\n\tLogEntryCtxKey\
    \ = &contextKey{\"LogEntry\"}\n\n\t// DefaultLogger is called by the Logger middleware\
    \ handler to log each request.\n\t// Its made a package-level variable so that\
    \ it can be reconfigured for custom\n\t// logging configurations.\n\tDefaultLogger\
    \ func(next http.Handler) http.Handler\n)\n\n// Logger is a middleware that logs\
    \ the start and end of each request, along\n// with some useful data about what\
    \ was requested, what the response status was,\n// and how long it took to return.\
    \ When standard output is a TTY, Logger will\n// print in color, otherwise it\
    \ will print in black and white. Logger prints a\n// request ID if one is provided.\n\
    //\n// Alternatively, look at https://github.com/goware/httplog for a more in-depth\n\
    // http logger with structured logging support.\n//\n// IMPORTANT NOTE: Logger\
    \ should go before any other middleware that may change\n// the response, such\
    \ as middleware.Recoverer. Example:\n//\n//\tr := chi.NewRouter()\n//\tr.Use(middleware.Logger)\
    \        // <--<< Logger should come before Recoverer\n//\tr.Use(middleware.Recoverer)\n\
    //\tr.Get(\"/\", handler)\nfunc Logger(next http.Handler) http.Handler {\n\treturn\
    \ DefaultLogger(next)\n}\n\n// RequestLogger returns a logger handler using a\
    \ custom LogFormatter.\nfunc RequestLogger(f LogFormatter) func(next http.Handler)\
    \ http.Handler {\n\treturn func(next http.Handler) http.Handler {\n\t\tfn := func(w\
    \ http.ResponseWriter, r *http.Request) {\n\t\t\tentry := f.NewLogEntry(r)\n\t\
    \t\tww := NewWrapResponseWriter(w, r.ProtoMajor)\n\n\t\t\tt1 := time.Now()\n\t\
    \t\tdefer func() {\n\t\t\t\tentry.Write(ww.Status(), ww.BytesWritten(), ww.Header(),\
    \ time.Since(t1), nil)\n\t\t\t}()\n\n\t\t\tnext.ServeHTTP(ww, WithLogEntry(r,\
    \ entry))\n\t\t}\n\t\treturn http.HandlerFunc(fn)\n\t}\n}\n\n// LogFormatter initiates\
    \ the beginning of a new LogEntry per request.\n// See DefaultLogFormatter for\
    \ an example implementation.\ntype LogFormatter interface {\n\tNewLogEntry(r *http.Request)\
    \ LogEntry\n}\n\n// LogEntry records the final log when a request completes.\n\
    // See defaultLogEntry for an example implementation.\ntype LogEntry interface\
    \ {\n\tWrite(status, bytes int, header http.Header, elapsed time.Duration, extra\
    \ interface{})\n\tPanic(v interface{}, stack []byte)\n}\n\n// GetLogEntry returns\
    \ the in-context LogEntry for a request.\nfunc GetLogEntry(r *http.Request) LogEntry\
    \ {\n\tentry, _ := r.Context().Value(LogEntryCtxKey).(LogEntry)\n\treturn entry\n\
    }\n\n// WithLogEntry sets the in-context LogEntry for a request.\nfunc WithLogEntry(r\
    \ *http.Request, entry LogEntry) *http.Request {\n\tr = r.WithContext(context.WithValue(r.Context(),\
    \ LogEntryCtxKey, entry))\n\treturn r\n}\n\n// LoggerInterface accepts printing\
    \ to stdlib logger or compatible logger.\ntype LoggerInterface interface {\n\t\
    Print(v ...interface{})\n}\n\n// DefaultLogFormatter is a simple logger that implements\
    \ a LogFormatter.\ntype DefaultLogFormatter struct {\n\tLogger  LoggerInterface\n\
    \tNoColor bool\n}\n\n// NewLogEntry creates a new LogEntry for the request.\n\
    func (l *DefaultLogFormatter) NewLogEntry(r *http.Request) LogEntry {\n\tuseColor\
    \ := !l.NoColor\n\tentry := &defaultLogEntry{\n\t\tDefaultLogFormatter: l,\n\t\
    \trequest:             r,\n\t\tbuf:                 &bytes.Buffer{},\n\t\tuseColor:\
    \            useColor,\n\t}\n\n\treqID := GetReqID(r.Context())\n\tif reqID !=\
    \ \"\" {\n\t\tcW(entry.buf, useColor, nYellow, \"[%s] \", reqID)\n\t}\n\tcW(entry.buf,\
    \ useColor, nCyan, \"\\\"\")\n\tcW(entry.buf, useColor, bMagenta, \"%s \", r.Method)\n\
    \n\tscheme := \"http\"\n\tif r.TLS != nil {\n\t\tscheme = \"https\"\n\t}\n\tcW(entry.buf,\
    \ useColor, nCyan, \"%s://%s%s %s\\\" \", scheme, r.Host, r.RequestURI, r.Proto)\n\
    \n\tentry.buf.WriteString(\"from \")\n\tentry.buf.WriteString(r.RemoteAddr)\n\t\
    entry.buf.WriteString(\" - \")\n\n\treturn entry\n}\n\ntype defaultLogEntry struct\
    \ {\n\t*DefaultLogFormatter\n\trequest  *http.Request\n\tbuf      *bytes.Buffer\n\
    \tuseColor bool\n}\n\nfunc (l *defaultLogEntry) Write(status, bytes int, header\
    \ http.Header, elapsed time.Duration, extra interface{}) {\n\tswitch {\n\tcase\
    \ status < 200:\n\t\tcW(l.buf, l.useColor, bBlue, \"%03d\", status)\n\tcase status\
    \ < 300:\n\t\tcW(l.buf, l.useColor, bGreen, \"%03d\", status)\n\tcase status <\
    \ 400:\n\t\tcW(l.buf, l.useColor, bCyan, \"%03d\", status)\n\tcase status < 500:\n\
    \t\tcW(l.buf, l.useColor, bYellow, \"%03d\", status)\n\tdefault:\n\t\tcW(l.buf,\
    \ l.useColor, bRed, \"%03d\", status)\n\t}\n\n\tcW(l.buf, l.useColor, bBlue, \"\
    \ %dB\", bytes)\n\n\tl.buf.WriteString(\" in \")\n\tif elapsed < 500*time.Millisecond\
    \ {\n\t\tcW(l.buf, l.useColor, nGreen, \"%s\", elapsed)\n\t} else if elapsed <\
    \ 5*time.Second {\n\t\tcW(l.buf, l.useColor, nYellow, \"%s\", elapsed)\n\t} else\
    \ {\n\t\tcW(l.buf, l.useColor, nRed, \"%s\", elapsed)\n\t}\n\n\tl.Logger.Print(l.buf.String())\n\
    }\n\nfunc (l *defaultLogEntry) Panic(v interface{}, stack []byte) {\n\tPrintPrettyStack(v)\n\
    }\n\nfunc init() {\n\tcolor := true\n\tif runtime.GOOS == \"windows\" {\n\t\t\
    color = false\n\t}\n\tDefaultLogger = RequestLogger(&DefaultLogFormatter{Logger:\
    \ log.New(os.Stdout, \"\", log.LstdFlags), NoColor: !color})\n}\n\n### Source\
    \ File Dependency Files Content\n### Dependency File: empty.go\n\nOutput the complete\
    \ test file, code only, no explanations.\n### Time\nCurrent time: 2025-03-23 22:48:57\n"
  role: user
