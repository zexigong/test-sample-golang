messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given Go code files of the repository. Make sure the tests
    can be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: hugo\nTest File Path: hugo\\filename_filter_fs_test.go\\\
    filename_filter_fs_test.go\nProject Programming Language: Go\nTesting Framework:\
    \ go testing\n### Source File Content\n### Source File: hugo\\filename_filter_fs_test.go\\\
    source_files\\filename_filter_fs.go\n// Copyright 2021 The Hugo Authors. All rights\
    \ reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"\
    );\n// you may not use this file except in compliance with the License.\n// You\
    \ may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0\n\
    //\n// Unless required by applicable law or agreed to in writing, software\n//\
    \ distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT\
    \ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the\
    \ License for the specific language governing permissions and\n// limitations\
    \ under the License.\n\npackage hugofs\n\nimport (\n\t\"io/fs\"\n\t\"os\"\n\t\"\
    strings\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/gohugoio/hugo/hugofs/glob\"\
    \n\t\"github.com/spf13/afero\"\n)\n\nvar _ FilesystemUnwrapper = (*filenameFilterFs)(nil)\n\
    \nfunc newFilenameFilterFs(fs afero.Fs, base string, filter *glob.FilenameFilter)\
    \ afero.Fs {\n\treturn &filenameFilterFs{\n\t\tfs:     fs,\n\t\tbase:   base,\n\
    \t\tfilter: filter,\n\t}\n}\n\n// filenameFilterFs is a filesystem that filters\
    \ by filename.\ntype filenameFilterFs struct {\n\tbase string\n\tfs   afero.Fs\n\
    \n\tfilter *glob.FilenameFilter\n}\n\nfunc (fs *filenameFilterFs) UnwrapFilesystem()\
    \ afero.Fs {\n\treturn fs.fs\n}\n\nfunc (fs *filenameFilterFs) Open(name string)\
    \ (afero.File, error) {\n\tfi, err := fs.fs.Stat(name)\n\tif err != nil {\n\t\t\
    return nil, err\n\t}\n\n\tif !fs.filter.Match(name, fi.IsDir()) {\n\t\treturn\
    \ nil, os.ErrNotExist\n\t}\n\n\tf, err := fs.fs.Open(name)\n\tif err != nil {\n\
    \t\treturn nil, err\n\t}\n\n\tif !fi.IsDir() {\n\t\treturn f, nil\n\t}\n\n\treturn\
    \ &filenameFilterDir{\n\t\tFile:   f,\n\t\tbase:   fs.base,\n\t\tfilter: fs.filter,\n\
    \t}, nil\n}\n\nfunc (fs *filenameFilterFs) OpenFile(name string, flag int, perm\
    \ os.FileMode) (afero.File, error) {\n\treturn fs.Open(name)\n}\n\nfunc (fs *filenameFilterFs)\
    \ Stat(name string) (os.FileInfo, error) {\n\tfi, err := fs.fs.Stat(name)\n\t\
    if err != nil {\n\t\treturn nil, err\n\t}\n\tif !fs.filter.Match(name, fi.IsDir())\
    \ {\n\t\treturn nil, os.ErrNotExist\n\t}\n\treturn fi, nil\n}\n\ntype filenameFilterDir\
    \ struct {\n\tafero.File\n\tbase   string\n\tfilter *glob.FilenameFilter\n}\n\n\
    func (f *filenameFilterDir) ReadDir(n int) ([]fs.DirEntry, error) {\n\tdes, err\
    \ := f.File.(fs.ReadDirFile).ReadDir(n)\n\tif err != nil {\n\t\treturn nil, err\n\
    \t}\n\ti := 0\n\tfor _, de := range des {\n\t\tfim := de.(FileMetaInfo)\n\t\t\
    rel := strings.TrimPrefix(fim.Meta().Filename, f.base)\n\t\tif f.filter.Match(rel,\
    \ de.IsDir()) {\n\t\t\tdes[i] = de\n\t\t\ti++\n\t\t}\n\t}\n\treturn des[:i], nil\n\
    }\n\nfunc (f *filenameFilterDir) Readdir(count int) ([]os.FileInfo, error) {\n\
    \tpanic(\"not supported: Use ReadDir\")\n}\n\nfunc (f *filenameFilterDir) Readdirnames(count\
    \ int) ([]string, error) {\n\tdes, err := f.ReadDir(count)\n\tif err != nil {\n\
    \t\treturn nil, err\n\t}\n\n\tdirs := make([]string, len(des))\n\tfor i, d :=\
    \ range des {\n\t\tdirs[i] = d.Name()\n\t}\n\treturn dirs, nil\n}\n\nfunc (fs\
    \ *filenameFilterFs) Chmod(n string, m os.FileMode) error {\n\treturn syscall.EPERM\n\
    }\n\nfunc (fs *filenameFilterFs) Chtimes(n string, a, m time.Time) error {\n\t\
    return syscall.EPERM\n}\n\nfunc (fs *filenameFilterFs) Chown(n string, uid, gid\
    \ int) error {\n\treturn syscall.EPERM\n}\n\nfunc (fs *filenameFilterFs) ReadDir(name\
    \ string) ([]os.FileInfo, error) {\n\tpanic(\"not implemented\")\n}\n\nfunc (fs\
    \ *filenameFilterFs) Remove(n string) error {\n\treturn syscall.EPERM\n}\n\nfunc\
    \ (fs *filenameFilterFs) RemoveAll(p string) error {\n\treturn syscall.EPERM\n\
    }\n\nfunc (fs *filenameFilterFs) Rename(o, n string) error {\n\treturn syscall.EPERM\n\
    }\n\nfunc (fs *filenameFilterFs) Create(n string) (afero.File, error) {\n\treturn\
    \ nil, syscall.EPERM\n}\n\nfunc (fs *filenameFilterFs) Name() string {\n\treturn\
    \ \"FinameFilterFS\"\n}\n\nfunc (fs *filenameFilterFs) Mkdir(n string, p os.FileMode)\
    \ error {\n\treturn syscall.EPERM\n}\n\nfunc (fs *filenameFilterFs) MkdirAll(n\
    \ string, p os.FileMode) error {\n\treturn syscall.EPERM\n}\n\n### Source File\
    \ Dependency Files Content\n### Dependency File: hugo\\filename_filter_fs_test.go\\\
    dependent_files\\filename_filter.go\n// Copyright 2021 The Hugo Authors. All rights\
    \ reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"\
    );\n// you may not use this file except in compliance with the License.\n// You\
    \ may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0\n\
    //\n// Unless required by applicable law or agreed to in writing, software\n//\
    \ distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT\
    \ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the\
    \ License for the specific language governing permissions and\n// limitations\
    \ under the License.\n\npackage glob\n\nimport (\n\t\"path\"\n\t\"path/filepath\"\
    \n\t\"strings\"\n\n\t\"github.com/gobwas/glob\"\n)\n\ntype FilenameFilter struct\
    \ {\n\tshouldInclude func(filename string) bool\n\tinclusions    []glob.Glob\n\
    \tdirInclusions []glob.Glob\n\texclusions    []glob.Glob\n\tisWindows     bool\n\
    \n\tnested []*FilenameFilter\n}\n\nfunc normalizeFilenameGlobPattern(s string)\
    \ string {\n\t// Use Unix separators even on Windows.\n\ts = filepath.ToSlash(s)\n\
    \tif !strings.HasPrefix(s, \"/\") {\n\t\ts = \"/\" + s\n\t}\n\treturn s\n}\n\n\
    // NewFilenameFilter creates a new Glob where the Match method will\n// return\
    \ true if the file should be included.\n// Note that the inclusions will be checked\
    \ first.\nfunc NewFilenameFilter(inclusions, exclusions []string) (*FilenameFilter,\
    \ error) {\n\tif inclusions == nil && exclusions == nil {\n\t\treturn nil, nil\n\
    \t}\n\tfilter := &FilenameFilter{isWindows: isWindows}\n\n\tfor _, include :=\
    \ range inclusions {\n\t\tinclude = normalizeFilenameGlobPattern(include)\n\t\t\
    g, err := GetGlob(include)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\
    \t\tfilter.inclusions = append(filter.inclusions, g)\n\n\t\t// For mounts that\
    \ do directory walking (e.g. content) we\n\t\t// must make sure that all directories\
    \ up to this inclusion also\n\t\t// gets included.\n\t\tdir := path.Dir(include)\n\
    \t\tparts := strings.Split(dir, \"/\")\n\t\tfor i := range parts {\n\t\t\tpattern\
    \ := \"/\" + filepath.Join(parts[:i+1]...)\n\t\t\tg, err := GetGlob(pattern)\n\
    \t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tfilter.dirInclusions\
    \ = append(filter.dirInclusions, g)\n\t\t}\n\t}\n\n\tfor _, exclude := range exclusions\
    \ {\n\t\texclude = normalizeFilenameGlobPattern(exclude)\n\t\tg, err := GetGlob(exclude)\n\
    \t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfilter.exclusions = append(filter.exclusions,\
    \ g)\n\t}\n\n\treturn filter, nil\n}\n\n// MustNewFilenameFilter invokes NewFilenameFilter\
    \ and panics on error.\nfunc MustNewFilenameFilter(inclusions, exclusions []string)\
    \ *FilenameFilter {\n\tfilter, err := NewFilenameFilter(inclusions, exclusions)\n\
    \tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn filter\n}\n\n// NewFilenameFilterForInclusionFunc\
    \ create a new filter using the provided inclusion func.\nfunc NewFilenameFilterForInclusionFunc(shouldInclude\
    \ func(filename string) bool) *FilenameFilter {\n\treturn &FilenameFilter{shouldInclude:\
    \ shouldInclude, isWindows: isWindows}\n}\n\n// Match returns whether filename\
    \ should be included.\nfunc (f *FilenameFilter) Match(filename string, isDir bool)\
    \ bool {\n\tif f == nil {\n\t\treturn true\n\t}\n\tif !f.doMatch(filename, isDir)\
    \ {\n\t\treturn false\n\t}\n\n\tfor _, nested := range f.nested {\n\t\tif !nested.Match(filename,\
    \ isDir) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n// Append appends\
    \ a filter to the chain. The receiver will be copied if needed.\nfunc (f *FilenameFilter)\
    \ Append(other *FilenameFilter) *FilenameFilter {\n\tif f == nil {\n\t\treturn\
    \ other\n\t}\n\n\tclone := *f\n\tnested := make([]*FilenameFilter, len(clone.nested)+1)\n\
    \tcopy(nested, clone.nested)\n\tnested[len(nested)-1] = other\n\tclone.nested\
    \ = nested\n\n\treturn &clone\n}\n\nfunc (f *FilenameFilter) doMatch(filename\
    \ string, isDir bool) bool {\n\tif f == nil {\n\t\treturn true\n\t}\n\n\tif !strings.HasPrefix(filename,\
    \ filepathSeparator) {\n\t\tfilename = filepathSeparator + filename\n\t}\n\n\t\
    if f.shouldInclude != nil {\n\t\tif f.shouldInclude(filename) {\n\t\t\treturn\
    \ true\n\t\t}\n\t\tif f.isWindows {\n\t\t\t// The Glob matchers below handles\
    \ this by themselves,\n\t\t\t// for the shouldInclude we need to take some extra\
    \ steps\n\t\t\t// to make this robust.\n\t\t\twinFilename := filepath.FromSlash(filename)\n\
    \t\t\tif filename != winFilename {\n\t\t\t\tif f.shouldInclude(winFilename) {\n\
    \t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tfor _, inclusion\
    \ := range f.inclusions {\n\t\tif inclusion.Match(filename) {\n\t\t\treturn true\n\
    \t\t}\n\t}\n\n\tif isDir && f.inclusions != nil {\n\t\tfor _, inclusion := range\
    \ f.dirInclusions {\n\t\t\tif inclusion.Match(filename) {\n\t\t\t\treturn true\n\
    \t\t\t}\n\t\t}\n\t}\n\n\tfor _, exclusion := range f.exclusions {\n\t\tif exclusion.Match(filename)\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn f.inclusions == nil && f.shouldInclude\
    \ == nil\n}\n\n\n### Dependency File: hugo\\filename_filter_fs_test.go\\dependent_files\\\
    glob.go\n// Copyright 2021 The Hugo Authors. All rights reserved.\n//\n// Licensed\
    \ under the Apache License, Version 2.0 (the \"License\");\n// you may not use\
    \ this file except in compliance with the License.\n// You may obtain a copy of\
    \ the License at\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless\
    \ required by applicable law or agreed to in writing, software\n// distributed\
    \ under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES\
    \ OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for\
    \ the specific language governing permissions and\n// limitations under the License.\n\
    \npackage glob\n\nimport (\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"runtime\"\
    \n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gobwas/glob\"\n\t\"github.com/gobwas/glob/syntax\"\
    \n)\n\nconst filepathSeparator = string(os.PathSeparator)\n\nvar (\n\tisWindows\
    \        = runtime.GOOS == \"windows\"\n\tdefaultGlobCache = &globCache{\n\t\t\
    isWindows: isWindows,\n\t\tcache:     make(map[string]globErr),\n\t}\n)\n\ntype\
    \ globErr struct {\n\tglob glob.Glob\n\terr  error\n}\n\ntype globCache struct\
    \ {\n\t// Config\n\tisWindows bool\n\n\t// Cache\n\tsync.RWMutex\n\tcache map[string]globErr\n\
    }\n\nfunc (gc *globCache) GetGlob(pattern string) (glob.Glob, error) {\n\tvar\
    \ eg globErr\n\n\tgc.RLock()\n\tvar found bool\n\teg, found = gc.cache[pattern]\n\
    \tgc.RUnlock()\n\tif found {\n\t\treturn eg.glob, eg.err\n\t}\n\n\tvar g glob.Glob\n\
    \tvar err error\n\n\tpattern = filepath.ToSlash(pattern)\n\tg, err = glob.Compile(strings.ToLower(pattern),\
    \ '/')\n\n\teg = globErr{\n\t\tglobDecorator{\n\t\t\tg:         g,\n\t\t\tisWindows:\
    \ gc.isWindows,\n\t\t},\n\t\terr,\n\t}\n\n\tgc.Lock()\n\tgc.cache[pattern] = eg\n\
    \tgc.Unlock()\n\n\treturn eg.glob, eg.err\n}\n\n// Or creates a new Glob from\
    \ the given globs.\nfunc Or(globs ...glob.Glob) glob.Glob {\n\treturn globSlice{globs:\
    \ globs}\n}\n\n// MatchesFunc is a convenience type to create a glob.Glob from\
    \ a function.\ntype MatchesFunc func(s string) bool\n\nfunc (m MatchesFunc) Match(s\
    \ string) bool {\n\treturn m(s)\n}\n\ntype globSlice struct {\n\tglobs []glob.Glob\n\
    }\n\nfunc (g globSlice) Match(s string) bool {\n\tfor _, g := range g.globs {\n\
    \t\tif g.Match(s) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\ntype\
    \ globDecorator struct {\n\t// On Windows we may get filenames with Windows slashes\
    \ to match,\n\t// which we need to normalize.\n\tisWindows bool\n\n\tg glob.Glob\n\
    }\n\nfunc (g globDecorator) Match(s string) bool {\n\tif g.isWindows {\n\t\ts\
    \ = filepath.ToSlash(s)\n\t}\n\ts = strings.ToLower(s)\n\treturn g.g.Match(s)\n\
    }\n\nfunc GetGlob(pattern string) (glob.Glob, error) {\n\treturn defaultGlobCache.GetGlob(pattern)\n\
    }\n\nfunc NormalizePath(p string) string {\n\treturn strings.ToLower(NormalizePathNoLower(p))\n\
    }\n\nfunc NormalizePathNoLower(p string) string {\n\treturn strings.Trim(path.Clean(filepath.ToSlash(p)),\
    \ \"/.\")\n}\n\n// ResolveRootDir takes a normalized path on the form \"assets/**.json\"\
    \ and\n// determines any root dir, i.e. any start path without any wildcards.\n\
    func ResolveRootDir(p string) string {\n\tparts := strings.Split(path.Dir(p),\
    \ \"/\")\n\tvar roots []string\n\tfor _, part := range parts {\n\t\tif HasGlobChar(part)\
    \ {\n\t\t\tbreak\n\t\t}\n\t\troots = append(roots, part)\n\t}\n\n\tif len(roots)\
    \ == 0 {\n\t\treturn \"\"\n\t}\n\n\treturn strings.Join(roots, \"/\")\n}\n\n//\
    \ FilterGlobParts removes any string with glob wildcard.\nfunc FilterGlobParts(a\
    \ []string) []string {\n\tb := a[:0]\n\tfor _, x := range a {\n\t\tif !HasGlobChar(x)\
    \ {\n\t\t\tb = append(b, x)\n\t\t}\n\t}\n\treturn b\n}\n\n// HasGlobChar returns\
    \ whether s contains any glob wildcards.\nfunc HasGlobChar(s string) bool {\n\t\
    for i := 0; i < len(s); i++ {\n\t\tif syntax.Special(s[i]) {\n\t\t\treturn true\n\
    \t\t}\n\t}\n\treturn false\n}\n\nOutput the complete test file, code only, no\
    \ explanations.\n### Time\nCurrent time: 2025-03-23 23:55:02\n"
  role: user
