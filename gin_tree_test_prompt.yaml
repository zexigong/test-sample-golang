messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given Go code files of the repository. Make sure the tests
    can be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: gin\nTest File Path: gin\\tree_test.go\\\
    tree_test.go\nProject Programming Language: Go\nTesting Framework: go testing\n\
    ### Source File Content\n### Source File: gin\\tree_test.go\\source_files\\tree.go\n\
    // Copyright 2013 Julien Schmidt. All rights reserved.\n// Use of this source\
    \ code is governed by a BSD-style license that can be found\n// at https://github.com/julienschmidt/httprouter/blob/master/LICENSE\n\
    \npackage gin\n\nimport (\n\t\"bytes\"\n\t\"net/url\"\n\t\"strings\"\n\t\"unicode\"\
    \n\t\"unicode/utf8\"\n\n\t\"github.com/gin-gonic/gin/internal/bytesconv\"\n)\n\
    \nvar (\n\tstrColon = []byte(\":\")\n\tstrStar  = []byte(\"*\")\n\tstrSlash =\
    \ []byte(\"/\")\n)\n\n// Param is a single URL parameter, consisting of a key\
    \ and a value.\ntype Param struct {\n\tKey   string\n\tValue string\n}\n\n// Params\
    \ is a Param-slice, as returned by the router.\n// The slice is ordered, the first\
    \ URL parameter is also the first slice value.\n// It is therefore safe to read\
    \ values by the index.\ntype Params []Param\n\n// Get returns the value of the\
    \ first Param which key matches the given name and a boolean true.\n// If no matching\
    \ Param is found, an empty string is returned and a boolean false .\nfunc (ps\
    \ Params) Get(name string) (string, bool) {\n\tfor _, entry := range ps {\n\t\t\
    if entry.Key == name {\n\t\t\treturn entry.Value, true\n\t\t}\n\t}\n\treturn \"\
    \", false\n}\n\n// ByName returns the value of the first Param which key matches\
    \ the given name.\n// If no matching Param is found, an empty string is returned.\n\
    func (ps Params) ByName(name string) (va string) {\n\tva, _ = ps.Get(name)\n\t\
    return\n}\n\ntype methodTree struct {\n\tmethod string\n\troot   *node\n}\n\n\
    type methodTrees []methodTree\n\nfunc (trees methodTrees) get(method string) *node\
    \ {\n\tfor _, tree := range trees {\n\t\tif tree.method == method {\n\t\t\treturn\
    \ tree.root\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc longestCommonPrefix(a, b string)\
    \ int {\n\ti := 0\n\tmax_ := min(len(a), len(b))\n\tfor i < max_ && a[i] == b[i]\
    \ {\n\t\ti++\n\t}\n\treturn i\n}\n\n// addChild will add a child node, keeping\
    \ wildcardChild at the end\nfunc (n *node) addChild(child *node) {\n\tif n.wildChild\
    \ && len(n.children) > 0 {\n\t\twildcardChild := n.children[len(n.children)-1]\n\
    \t\tn.children = append(n.children[:len(n.children)-1], child, wildcardChild)\n\
    \t} else {\n\t\tn.children = append(n.children, child)\n\t}\n}\n\nfunc countParams(path\
    \ string) uint16 {\n\tvar n uint16\n\ts := bytesconv.StringToBytes(path)\n\tn\
    \ += uint16(bytes.Count(s, strColon))\n\tn += uint16(bytes.Count(s, strStar))\n\
    \treturn n\n}\n\nfunc countSections(path string) uint16 {\n\ts := bytesconv.StringToBytes(path)\n\
    \treturn uint16(bytes.Count(s, strSlash))\n}\n\ntype nodeType uint8\n\nconst (\n\
    \tstatic nodeType = iota\n\troot\n\tparam\n\tcatchAll\n)\n\ntype node struct {\n\
    \tpath      string\n\tindices   string\n\twildChild bool\n\tnType     nodeType\n\
    \tpriority  uint32\n\tchildren  []*node // child nodes, at most 1 :param style\
    \ node at the end of the array\n\thandlers  HandlersChain\n\tfullPath  string\n\
    }\n\n// Increments priority of the given child and reorders if necessary\nfunc\
    \ (n *node) incrementChildPrio(pos int) int {\n\tcs := n.children\n\tcs[pos].priority++\n\
    \tprio := cs[pos].priority\n\n\t// Adjust position (move to front)\n\tnewPos :=\
    \ pos\n\tfor ; newPos > 0 && cs[newPos-1].priority < prio; newPos-- {\n\t\t//\
    \ Swap node positions\n\t\tcs[newPos-1], cs[newPos] = cs[newPos], cs[newPos-1]\n\
    \t}\n\n\t// Build new index char string\n\tif newPos != pos {\n\t\tn.indices =\
    \ n.indices[:newPos] + // Unchanged prefix, might be empty\n\t\t\tn.indices[pos:pos+1]\
    \ + // The index char we move\n\t\t\tn.indices[newPos:pos] + n.indices[pos+1:]\
    \ // Rest without char at 'pos'\n\t}\n\n\treturn newPos\n}\n\n// addRoute adds\
    \ a node with the given handle to the path.\n// Not concurrency-safe!\nfunc (n\
    \ *node) addRoute(path string, handlers HandlersChain) {\n\tfullPath := path\n\
    \tn.priority++\n\n\t// Empty tree\n\tif len(n.path) == 0 && len(n.children) ==\
    \ 0 {\n\t\tn.insertChild(path, fullPath, handlers)\n\t\tn.nType = root\n\t\treturn\n\
    \t}\n\n\tparentFullPathIndex := 0\n\nwalk:\n\tfor {\n\t\t// Find the longest common\
    \ prefix.\n\t\t// This also implies that the common prefix contains no ':' or\
    \ '*'\n\t\t// since the existing key can't contain those chars.\n\t\ti := longestCommonPrefix(path,\
    \ n.path)\n\n\t\t// Split edge\n\t\tif i < len(n.path) {\n\t\t\tchild := node{\n\
    \t\t\t\tpath:      n.path[i:],\n\t\t\t\twildChild: n.wildChild,\n\t\t\t\tnType:\
    \     static,\n\t\t\t\tindices:   n.indices,\n\t\t\t\tchildren:  n.children,\n\
    \t\t\t\thandlers:  n.handlers,\n\t\t\t\tpriority:  n.priority - 1,\n\t\t\t\tfullPath:\
    \  n.fullPath,\n\t\t\t}\n\n\t\t\tn.children = []*node{&child}\n\t\t\t// []byte\
    \ for proper unicode char conversion, see #65\n\t\t\tn.indices = bytesconv.BytesToString([]byte{n.path[i]})\n\
    \t\t\tn.path = path[:i]\n\t\t\tn.handlers = nil\n\t\t\tn.wildChild = false\n\t\
    \t\tn.fullPath = fullPath[:parentFullPathIndex+i]\n\t\t}\n\n\t\t// Make new node\
    \ a child of this node\n\t\tif i < len(path) {\n\t\t\tpath = path[i:]\n\t\t\t\
    c := path[0]\n\n\t\t\t// '/' after param\n\t\t\tif n.nType == param && c == '/'\
    \ && len(n.children) == 1 {\n\t\t\t\tparentFullPathIndex += len(n.path)\n\t\t\t\
    \tn = n.children[0]\n\t\t\t\tn.priority++\n\t\t\t\tcontinue walk\n\t\t\t}\n\n\t\
    \t\t// Check if a child with the next path byte exists\n\t\t\tfor i, max_ := 0,\
    \ len(n.indices); i < max_; i++ {\n\t\t\t\tif c == n.indices[i] {\n\t\t\t\t\t\
    parentFullPathIndex += len(n.path)\n\t\t\t\t\ti = n.incrementChildPrio(i)\n\t\t\
    \t\t\tn = n.children[i]\n\t\t\t\t\tcontinue walk\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\
    // Otherwise insert it\n\t\t\tif c != ':' && c != '*' && n.nType != catchAll {\n\
    \t\t\t\t// []byte for proper unicode char conversion, see #65\n\t\t\t\tn.indices\
    \ += bytesconv.BytesToString([]byte{c})\n\t\t\t\tchild := &node{\n\t\t\t\t\tfullPath:\
    \ fullPath,\n\t\t\t\t}\n\t\t\t\tn.addChild(child)\n\t\t\t\tn.incrementChildPrio(len(n.indices)\
    \ - 1)\n\t\t\t\tn = child\n\t\t\t} else if n.wildChild {\n\t\t\t\t// inserting\
    \ a wildcard node, need to check if it conflicts with the existing wildcard\n\t\
    \t\t\tn = n.children[len(n.children)-1]\n\t\t\t\tn.priority++\n\n\t\t\t\t// Check\
    \ if the wildcard matches\n\t\t\t\tif len(path) >= len(n.path) && n.path == path[:len(n.path)]\
    \ &&\n\t\t\t\t\t// Adding a child to a catchAll is not possible\n\t\t\t\t\tn.nType\
    \ != catchAll &&\n\t\t\t\t\t// Check for longer wildcard, e.g. :name and :names\n\
    \t\t\t\t\t(len(n.path) >= len(path) || path[len(n.path)] == '/') {\n\t\t\t\t\t\
    continue walk\n\t\t\t\t}\n\n\t\t\t\t// Wildcard conflict\n\t\t\t\tpathSeg := path\n\
    \t\t\t\tif n.nType != catchAll {\n\t\t\t\t\tpathSeg = strings.SplitN(pathSeg,\
    \ \"/\", 2)[0]\n\t\t\t\t}\n\t\t\t\tprefix := fullPath[:strings.Index(fullPath,\
    \ pathSeg)] + n.path\n\t\t\t\tpanic(\"'\" + pathSeg +\n\t\t\t\t\t\"' in new path\
    \ '\" + fullPath +\n\t\t\t\t\t\"' conflicts with existing wildcard '\" + n.path\
    \ +\n\t\t\t\t\t\"' in existing prefix '\" + prefix +\n\t\t\t\t\t\"'\")\n\t\t\t\
    }\n\n\t\t\tn.insertChild(path, fullPath, handlers)\n\t\t\treturn\n\t\t}\n\n\t\t\
    // Otherwise add handle to current node\n\t\tif n.handlers != nil {\n\t\t\tpanic(\"\
    handlers are already registered for path '\" + fullPath + \"'\")\n\t\t}\n\t\t\
    n.handlers = handlers\n\t\tn.fullPath = fullPath\n\t\treturn\n\t}\n}\n\n// Search\
    \ for a wildcard segment and check the name for invalid characters.\n// Returns\
    \ -1 as index, if no wildcard was found.\nfunc findWildcard(path string) (wildcard\
    \ string, i int, valid bool) {\n\t// Find start\n\tescapeColon := false\n\tfor\
    \ start, c := range []byte(path) {\n\t\tif escapeColon {\n\t\t\tescapeColon =\
    \ false\n\t\t\tif c == ':' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tpanic(\"invalid\
    \ escape string in path '\" + path + \"'\")\n\t\t}\n\t\tif c == '\\\\' {\n\t\t\
    \tescapeColon = true\n\t\t\tcontinue\n\t\t}\n\t\t// A wildcard starts with ':'\
    \ (param) or '*' (catch-all)\n\t\tif c != ':' && c != '*' {\n\t\t\tcontinue\n\t\
    \t}\n\n\t\t// Find end and check for invalid characters\n\t\tvalid = true\n\t\t\
    for end, c := range []byte(path[start+1:]) {\n\t\t\tswitch c {\n\t\t\tcase '/':\n\
    \t\t\t\treturn path[start : start+1+end], start, valid\n\t\t\tcase ':', '*':\n\
    \t\t\t\tvalid = false\n\t\t\t}\n\t\t}\n\t\treturn path[start:], start, valid\n\
    \t}\n\treturn \"\", -1, false\n}\n\nfunc (n *node) insertChild(path string, fullPath\
    \ string, handlers HandlersChain) {\n\tfor {\n\t\t// Find prefix until first wildcard\n\
    \t\twildcard, i, valid := findWildcard(path)\n\t\tif i < 0 { // No wildcard found\n\
    \t\t\tbreak\n\t\t}\n\n\t\t// The wildcard name must only contain one ':' or '*'\
    \ character\n\t\tif !valid {\n\t\t\tpanic(\"only one wildcard per path segment\
    \ is allowed, has: '\" +\n\t\t\t\twildcard + \"' in path '\" + fullPath + \"'\"\
    )\n\t\t}\n\n\t\t// check if the wildcard has a name\n\t\tif len(wildcard) < 2\
    \ {\n\t\t\tpanic(\"wildcards must be named with a non-empty name in path '\" +\
    \ fullPath + \"'\")\n\t\t}\n\n\t\tif wildcard[0] == ':' { // param\n\t\t\tif i\
    \ > 0 {\n\t\t\t\t// Insert prefix before the current wildcard\n\t\t\t\tn.path\
    \ = path[:i]\n\t\t\t\tpath = path[i:]\n\t\t\t}\n\n\t\t\tchild := &node{\n\t\t\t\
    \tnType:    param,\n\t\t\t\tpath:     wildcard,\n\t\t\t\tfullPath: fullPath,\n\
    \t\t\t}\n\t\t\tn.addChild(child)\n\t\t\tn.wildChild = true\n\t\t\tn = child\n\t\
    \t\tn.priority++\n\n\t\t\t// if the path doesn't end with the wildcard, then there\n\
    \t\t\t// will be another subpath starting with '/'\n\t\t\tif len(wildcard) < len(path)\
    \ {\n\t\t\t\tpath = path[len(wildcard):]\n\n\t\t\t\tchild := &node{\n\t\t\t\t\t\
    priority: 1,\n\t\t\t\t\tfullPath: fullPath,\n\t\t\t\t}\n\t\t\t\tn.addChild(child)\n\
    \t\t\t\tn = child\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Otherwise we're done.\
    \ Insert the handle in the new leaf\n\t\t\tn.handlers = handlers\n\t\t\treturn\n\
    \t\t}\n\n\t\t// catchAll\n\t\tif i+len(wildcard) != len(path) {\n\t\t\tpanic(\"\
    catch-all routes are only allowed at the end of the path in path '\" + fullPath\
    \ + \"'\")\n\t\t}\n\n\t\tif len(n.path) > 0 && n.path[len(n.path)-1] == '/' {\n\
    \t\t\tpathSeg := \"\"\n\t\t\tif len(n.children) != 0 {\n\t\t\t\tpathSeg = strings.SplitN(n.children[0].path,\
    \ \"/\", 2)[0]\n\t\t\t}\n\t\t\tpanic(\"catch-all wildcard '\" + path +\n\t\t\t\
    \t\"' in new path '\" + fullPath +\n\t\t\t\t\"' conflicts with existing path segment\
    \ '\" + pathSeg +\n\t\t\t\t\"' in existing prefix '\" + n.path + pathSeg +\n\t\
    \t\t\t\"'\")\n\t\t}\n\n\t\t// currently fixed width 1 for '/'\n\t\ti--\n\t\tif\
    \ i < 0 || path[i] != '/' {\n\t\t\tpanic(\"no / before catch-all in path '\" +\
    \ fullPath + \"'\")\n\t\t}\n\n\t\tn.path = path[:i]\n\n\t\t// First node: catchAll\
    \ node with empty path\n\t\tchild := &node{\n\t\t\twildChild: true,\n\t\t\tnType:\
    \     catchAll,\n\t\t\tfullPath:  fullPath,\n\t\t}\n\n\t\tn.addChild(child)\n\t\
    \tn.indices = string('/')\n\t\tn = child\n\t\tn.priority++\n\n\t\t// second node:\
    \ node holding the variable\n\t\tchild = &node{\n\t\t\tpath:     path[i:],\n\t\
    \t\tnType:    catchAll,\n\t\t\thandlers: handlers,\n\t\t\tpriority: 1,\n\t\t\t\
    fullPath: fullPath,\n\t\t}\n\t\tn.children = []*node{child}\n\n\t\treturn\n\t\
    }\n\n\t// If no wildcard was found, simply insert the path and handle\n\tn.path\
    \ = path\n\tn.handlers = handlers\n\tn.fullPath = fullPath\n}\n\n// nodeValue\
    \ holds return values of (*Node).getValue method\ntype nodeValue struct {\n\t\
    handlers HandlersChain\n\tparams   *Params\n\ttsr      bool\n\tfullPath string\n\
    }\n\ntype skippedNode struct {\n\tpath        string\n\tnode        *node\n\t\
    paramsCount int16\n}\n\n// Returns the handle registered with the given path (key).\
    \ The values of\n// wildcards are saved to a map.\n// If no handle can be found,\
    \ a TSR (trailing slash redirect) recommendation is\n// made if a handle exists\
    \ with an extra (without the) trailing slash for the\n// given path.\nfunc (n\
    \ *node) getValue(path string, params *Params, skippedNodes *[]skippedNode, unescape\
    \ bool) (value nodeValue) {\n\tvar globalParamsCount int16\n\nwalk: // Outer loop\
    \ for walking the tree\n\tfor {\n\t\tprefix := n.path\n\t\tif len(path) > len(prefix)\
    \ {\n\t\t\tif path[:len(prefix)] == prefix {\n\t\t\t\tpath = path[len(prefix):]\n\
    \n\t\t\t\t// Try all the non-wildcard children first by matching the indices\n\
    \t\t\t\tidxc := path[0]\n\t\t\t\tfor i, c := range []byte(n.indices) {\n\t\t\t\
    \t\tif c == idxc {\n\t\t\t\t\t\t//  strings.HasPrefix(n.children[len(n.children)-1].path,\
    \ \":\") == n.wildChild\n\t\t\t\t\t\tif n.wildChild {\n\t\t\t\t\t\t\tindex :=\
    \ len(*skippedNodes)\n\t\t\t\t\t\t\t*skippedNodes = (*skippedNodes)[:index+1]\n\
    \t\t\t\t\t\t\t(*skippedNodes)[index] = skippedNode{\n\t\t\t\t\t\t\t\tpath: prefix\
    \ + path,\n\t\t\t\t\t\t\t\tnode: &node{\n\t\t\t\t\t\t\t\t\tpath:      n.path,\n\
    \t\t\t\t\t\t\t\t\twildChild: n.wildChild,\n\t\t\t\t\t\t\t\t\tnType:     n.nType,\n\
    \t\t\t\t\t\t\t\t\tpriority:  n.priority,\n\t\t\t\t\t\t\t\t\tchildren:  n.children,\n\
    \t\t\t\t\t\t\t\t\thandlers:  n.handlers,\n\t\t\t\t\t\t\t\t\tfullPath:  n.fullPath,\n\
    \t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tparamsCount: globalParamsCount,\n\t\t\t\t\t\
    \t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tn = n.children[i]\n\t\t\t\t\t\tcontinue walk\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif !n.wildChild {\n\t\t\t\t\t// If the path\
    \ at the end of the loop is not equal to '/' and the current node has no child\
    \ nodes\n\t\t\t\t\t// the current node needs to roll back to last valid skippedNode\n\
    \t\t\t\t\tif path != \"/\" {\n\t\t\t\t\t\tfor length := len(*skippedNodes); length\
    \ > 0; length-- {\n\t\t\t\t\t\t\tskippedNode := (*skippedNodes)[length-1]\n\t\t\
    \t\t\t\t\t*skippedNodes = (*skippedNodes)[:length-1]\n\t\t\t\t\t\t\tif strings.HasSuffix(skippedNode.path,\
    \ path) {\n\t\t\t\t\t\t\t\tpath = skippedNode.path\n\t\t\t\t\t\t\t\tn = skippedNode.node\n\
    \t\t\t\t\t\t\t\tif value.params != nil {\n\t\t\t\t\t\t\t\t\t*value.params = (*value.params)[:skippedNode.paramsCount]\n\
    \t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tglobalParamsCount = skippedNode.paramsCount\n\
    \t\t\t\t\t\t\t\tcontinue walk\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\
    \t\t\t\t\t// Nothing found.\n\t\t\t\t\t// We can recommend to redirect to the\
    \ same URL without a\n\t\t\t\t\t// trailing slash if a leaf exists for that path.\n\
    \t\t\t\t\tvalue.tsr = path == \"/\" && n.handlers != nil\n\t\t\t\t\treturn value\n\
    \t\t\t\t}\n\n\t\t\t\t// Handle wildcard child, which is always at the end of the\
    \ array\n\t\t\t\tn = n.children[len(n.children)-1]\n\t\t\t\tglobalParamsCount++\n\
    \n\t\t\t\tswitch n.nType {\n\t\t\t\tcase param:\n\t\t\t\t\t// fix truncate the\
    \ parameter\n\t\t\t\t\t// tree_test.go  line: 204\n\n\t\t\t\t\t// Find param end\
    \ (either '/' or path end)\n\t\t\t\t\tend := 0\n\t\t\t\t\tfor end < len(path)\
    \ && path[end] != '/' {\n\t\t\t\t\t\tend++\n\t\t\t\t\t}\n\n\t\t\t\t\t// Save param\
    \ value\n\t\t\t\t\tif params != nil {\n\t\t\t\t\t\t// Preallocate capacity if\
    \ necessary\n\t\t\t\t\t\tif cap(*params) < int(globalParamsCount) {\n\t\t\t\t\t\
    \t\tnewParams := make(Params, len(*params), globalParamsCount)\n\t\t\t\t\t\t\t\
    copy(newParams, *params)\n\t\t\t\t\t\t\t*params = newParams\n\t\t\t\t\t\t}\n\n\
    \t\t\t\t\t\tif value.params == nil {\n\t\t\t\t\t\t\tvalue.params = params\n\t\t\
    \t\t\t\t}\n\t\t\t\t\t\t// Expand slice within preallocated capacity\n\t\t\t\t\t\
    \ti := len(*value.params)\n\t\t\t\t\t\t*value.params = (*value.params)[:i+1]\n\
    \t\t\t\t\t\tval := path[:end]\n\t\t\t\t\t\tif unescape {\n\t\t\t\t\t\t\tif v,\
    \ err := url.QueryUnescape(val); err == nil {\n\t\t\t\t\t\t\t\tval = v\n\t\t\t\
    \t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t(*value.params)[i] = Param{\n\t\t\t\t\t\t\
    \tKey:   n.path[1:],\n\t\t\t\t\t\t\tValue: val,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\
    \t\t\t\t\t// we need to go deeper!\n\t\t\t\t\tif end < len(path) {\n\t\t\t\t\t\
    \tif len(n.children) > 0 {\n\t\t\t\t\t\t\tpath = path[end:]\n\t\t\t\t\t\t\tn =\
    \ n.children[0]\n\t\t\t\t\t\t\tcontinue walk\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//\
    \ ... but we can't\n\t\t\t\t\t\tvalue.tsr = len(path) == end+1\n\t\t\t\t\t\treturn\
    \ value\n\t\t\t\t\t}\n\n\t\t\t\t\tif value.handlers = n.handlers; value.handlers\
    \ != nil {\n\t\t\t\t\t\tvalue.fullPath = n.fullPath\n\t\t\t\t\t\treturn value\n\
    \t\t\t\t\t}\n\t\t\t\t\tif len(n.children) == 1 {\n\t\t\t\t\t\t// No handle found.\
    \ Check if a handle for this path + a\n\t\t\t\t\t\t// trailing slash exists for\
    \ TSR recommendation\n\t\t\t\t\t\tn = n.children[0]\n\t\t\t\t\t\tvalue.tsr = (n.path\
    \ == \"/\" && n.handlers != nil) || (n.path == \"\" && n.indices == \"/\")\n\t\
    \t\t\t\t}\n\t\t\t\t\treturn value\n\n\t\t\t\tcase catchAll:\n\t\t\t\t\t// Save\
    \ param value\n\t\t\t\t\tif params != nil {\n\t\t\t\t\t\t// Preallocate capacity\
    \ if necessary\n\t\t\t\t\t\tif cap(*params) < int(globalParamsCount) {\n\t\t\t\
    \t\t\t\tnewParams := make(Params, len(*params), globalParamsCount)\n\t\t\t\t\t\
    \t\tcopy(newParams, *params)\n\t\t\t\t\t\t\t*params = newParams\n\t\t\t\t\t\t\
    }\n\n\t\t\t\t\t\tif value.params == nil {\n\t\t\t\t\t\t\tvalue.params = params\n\
    \t\t\t\t\t\t}\n\t\t\t\t\t\t// Expand slice within preallocated capacity\n\t\t\t\
    \t\t\ti := len(*value.params)\n\t\t\t\t\t\t*value.params = (*value.params)[:i+1]\n\
    \t\t\t\t\t\tval := path\n\t\t\t\t\t\tif unescape {\n\t\t\t\t\t\t\tif v, err :=\
    \ url.QueryUnescape(path); err == nil {\n\t\t\t\t\t\t\t\tval = v\n\t\t\t\t\t\t\
    \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t(*value.params)[i] = Param{\n\t\t\t\t\t\t\tKey:\
    \   n.path[2:],\n\t\t\t\t\t\t\tValue: val,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\
    \t\t\tvalue.handlers = n.handlers\n\t\t\t\t\tvalue.fullPath = n.fullPath\n\t\t\
    \t\t\treturn value\n\n\t\t\t\tdefault:\n\t\t\t\t\tpanic(\"invalid node type\"\
    )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif path == prefix {\n\t\t\t// If the current\
    \ path does not equal '/' and the node does not have a registered handle and the\
    \ most recently matched node has a child node\n\t\t\t// the current node needs\
    \ to roll back to last valid skippedNode\n\t\t\tif n.handlers == nil && path !=\
    \ \"/\" {\n\t\t\t\tfor length := len(*skippedNodes); length > 0; length-- {\n\t\
    \t\t\t\tskippedNode := (*skippedNodes)[length-1]\n\t\t\t\t\t*skippedNodes = (*skippedNodes)[:length-1]\n\
    \t\t\t\t\tif strings.HasSuffix(skippedNode.path, path) {\n\t\t\t\t\t\tpath = skippedNode.path\n\
    \t\t\t\t\t\tn = skippedNode.node\n\t\t\t\t\t\tif value.params != nil {\n\t\t\t\
    \t\t\t\t*value.params = (*value.params)[:skippedNode.paramsCount]\n\t\t\t\t\t\t\
    }\n\t\t\t\t\t\tglobalParamsCount = skippedNode.paramsCount\n\t\t\t\t\t\tcontinue\
    \ walk\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//\tn = latestNode.children[len(latestNode.children)-1]\n\
    \t\t\t}\n\t\t\t// We should have reached the node containing the handle.\n\t\t\
    \t// Check if this node has a handle registered.\n\t\t\tif value.handlers = n.handlers;\
    \ value.handlers != nil {\n\t\t\t\tvalue.fullPath = n.fullPath\n\t\t\t\treturn\
    \ value\n\t\t\t}\n\n\t\t\t// If there is no handle for this route, but this route\
    \ has a\n\t\t\t// wildcard child, there must be a handle for this path with an\n\
    \t\t\t// additional trailing slash\n\t\t\tif path == \"/\" && n.wildChild && n.nType\
    \ != root {\n\t\t\t\tvalue.tsr = true\n\t\t\t\treturn value\n\t\t\t}\n\n\t\t\t\
    if path == \"/\" && n.nType == static {\n\t\t\t\tvalue.tsr = true\n\t\t\t\treturn\
    \ value\n\t\t\t}\n\n\t\t\t// No handle found. Check if a handle for this path\
    \ + a\n\t\t\t// trailing slash exists for trailing slash recommendation\n\t\t\t\
    for i, c := range []byte(n.indices) {\n\t\t\t\tif c == '/' {\n\t\t\t\t\tn = n.children[i]\n\
    \t\t\t\t\tvalue.tsr = (len(n.path) == 1 && n.handlers != nil) ||\n\t\t\t\t\t\t\
    (n.nType == catchAll && n.children[0].handlers != nil)\n\t\t\t\t\treturn value\n\
    \t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value\n\t\t}\n\n\t\t// Nothing found. We can\
    \ recommend to redirect to the same URL with an\n\t\t// extra trailing slash if\
    \ a leaf exists for that path\n\t\tvalue.tsr = path == \"/\" ||\n\t\t\t(len(prefix)\
    \ == len(path)+1 && prefix[len(path)] == '/' &&\n\t\t\t\tpath == prefix[:len(prefix)-1]\
    \ && n.handlers != nil)\n\n\t\t// roll back to last valid skippedNode\n\t\tif\
    \ !value.tsr && path != \"/\" {\n\t\t\tfor length := len(*skippedNodes); length\
    \ > 0; length-- {\n\t\t\t\tskippedNode := (*skippedNodes)[length-1]\n\t\t\t\t\
    *skippedNodes = (*skippedNodes)[:length-1]\n\t\t\t\tif strings.HasSuffix(skippedNode.path,\
    \ path) {\n\t\t\t\t\tpath = skippedNode.path\n\t\t\t\t\tn = skippedNode.node\n\
    \t\t\t\t\tif value.params != nil {\n\t\t\t\t\t\t*value.params = (*value.params)[:skippedNode.paramsCount]\n\
    \t\t\t\t\t}\n\t\t\t\t\tglobalParamsCount = skippedNode.paramsCount\n\t\t\t\t\t\
    continue walk\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value\n\t}\n}\n\n// Makes\
    \ a case-insensitive lookup of the given path and tries to find a handler.\n//\
    \ It can optionally also fix trailing slashes.\n// It returns the case-corrected\
    \ path and a bool indicating whether the lookup\n// was successful.\nfunc (n *node)\
    \ findCaseInsensitivePath(path string, fixTrailingSlash bool) ([]byte, bool) {\n\
    \tconst stackBufSize = 128\n\n\t// Use a static sized buffer on the stack in the\
    \ common case.\n\t// If the path is too long, allocate a buffer on the heap instead.\n\
    \tbuf := make([]byte, 0, stackBufSize)\n\tif length := len(path) + 1; length >\
    \ stackBufSize {\n\t\tbuf = make([]byte, 0, length)\n\t}\n\n\tciPath := n.findCaseInsensitivePathRec(\n\
    \t\tpath,\n\t\tbuf,       // Preallocate enough memory for new path\n\t\t[4]byte{},\
    \ // Empty rune buffer\n\t\tfixTrailingSlash,\n\t)\n\n\treturn ciPath, ciPath\
    \ != nil\n}\n\n// Shift bytes in array by n bytes left\nfunc shiftNRuneBytes(rb\
    \ [4]byte, n int) [4]byte {\n\tswitch n {\n\tcase 0:\n\t\treturn rb\n\tcase 1:\n\
    \t\treturn [4]byte{rb[1], rb[2], rb[3], 0}\n\tcase 2:\n\t\treturn [4]byte{rb[2],\
    \ rb[3]}\n\tcase 3:\n\t\treturn [4]byte{rb[3]}\n\tdefault:\n\t\treturn [4]byte{}\n\
    \t}\n}\n\n// Recursive case-insensitive lookup function used by n.findCaseInsensitivePath\n\
    func (n *node) findCaseInsensitivePathRec(path string, ciPath []byte, rb [4]byte,\
    \ fixTrailingSlash bool) []byte {\n\tnpLen := len(n.path)\n\nwalk: // Outer loop\
    \ for walking the tree\n\tfor len(path) >= npLen && (npLen == 0 || strings.EqualFold(path[1:npLen],\
    \ n.path[1:])) {\n\t\t// Add common prefix to result\n\t\toldPath := path\n\t\t\
    path = path[npLen:]\n\t\tciPath = append(ciPath, n.path...)\n\n\t\tif len(path)\
    \ == 0 {\n\t\t\t// We should have reached the node containing the handle.\n\t\t\
    \t// Check if this node has a handle registered.\n\t\t\tif n.handlers != nil {\n\
    \t\t\t\treturn ciPath\n\t\t\t}\n\n\t\t\t// No handle found.\n\t\t\t// Try to fix\
    \ the path by adding a trailing slash\n\t\t\tif fixTrailingSlash {\n\t\t\t\tfor\
    \ i, c := range []byte(n.indices) {\n\t\t\t\t\tif c == '/' {\n\t\t\t\t\t\tn =\
    \ n.children[i]\n\t\t\t\t\t\tif (len(n.path) == 1 && n.handlers != nil) ||\n\t\
    \t\t\t\t\t\t(n.nType == catchAll && n.children[0].handlers != nil) {\n\t\t\t\t\
    \t\t\treturn append(ciPath, '/')\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn nil\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\t\t// If this node does\
    \ not have a wildcard (param or catchAll) child,\n\t\t// we can just look up the\
    \ next child node and continue to walk down\n\t\t// the tree\n\t\tif !n.wildChild\
    \ {\n\t\t\t// Skip rune bytes already processed\n\t\t\trb = shiftNRuneBytes(rb,\
    \ npLen)\n\n\t\t\tif rb[0] != 0 {\n\t\t\t\t// Old rune not finished\n\t\t\t\t\
    idxc := rb[0]\n\t\t\t\tfor i, c := range []byte(n.indices) {\n\t\t\t\t\tif c ==\
    \ idxc {\n\t\t\t\t\t\t// continue with child node\n\t\t\t\t\t\tn = n.children[i]\n\
    \t\t\t\t\t\tnpLen = len(n.path)\n\t\t\t\t\t\tcontinue walk\n\t\t\t\t\t}\n\t\t\t\
    \t}\n\t\t\t} else {\n\t\t\t\t// Process a new rune\n\t\t\t\tvar rv rune\n\n\t\t\
    \t\t// Find rune start.\n\t\t\t\t// Runes are up to 4 byte long,\n\t\t\t\t// -4\
    \ would definitely be another rune.\n\t\t\t\tvar off int\n\t\t\t\tfor max_ :=\
    \ min(npLen, 3); off < max_; off++ {\n\t\t\t\t\tif i := npLen - off; utf8.RuneStart(oldPath[i])\
    \ {\n\t\t\t\t\t\t// read rune from cached path\n\t\t\t\t\t\trv, _ = utf8.DecodeRuneInString(oldPath[i:])\n\
    \t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Calculate lowercase bytes\
    \ of current rune\n\t\t\t\tlo := unicode.ToLower(rv)\n\t\t\t\tutf8.EncodeRune(rb[:],\
    \ lo)\n\n\t\t\t\t// Skip already processed bytes\n\t\t\t\trb = shiftNRuneBytes(rb,\
    \ off)\n\n\t\t\t\tidxc := rb[0]\n\t\t\t\tfor i, c := range []byte(n.indices) {\n\
    \t\t\t\t\t// Lowercase matches\n\t\t\t\t\tif c == idxc {\n\t\t\t\t\t\t// must\
    \ use a recursive approach since both the\n\t\t\t\t\t\t// uppercase byte and the\
    \ lowercase byte might exist\n\t\t\t\t\t\t// as an index\n\t\t\t\t\t\tif out :=\
    \ n.children[i].findCaseInsensitivePathRec(\n\t\t\t\t\t\t\tpath, ciPath, rb, fixTrailingSlash,\n\
    \t\t\t\t\t\t); out != nil {\n\t\t\t\t\t\t\treturn out\n\t\t\t\t\t\t}\n\t\t\t\t\
    \t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If we found no match, the same\
    \ for the uppercase rune,\n\t\t\t\t// if it differs\n\t\t\t\tif up := unicode.ToUpper(rv);\
    \ up != lo {\n\t\t\t\t\tutf8.EncodeRune(rb[:], up)\n\t\t\t\t\trb = shiftNRuneBytes(rb,\
    \ off)\n\n\t\t\t\t\tidxc := rb[0]\n\t\t\t\t\tfor i, c := range []byte(n.indices)\
    \ {\n\t\t\t\t\t\t// Uppercase matches\n\t\t\t\t\t\tif c == idxc {\n\t\t\t\t\t\t\
    \t// Continue with child node\n\t\t\t\t\t\t\tn = n.children[i]\n\t\t\t\t\t\t\t\
    npLen = len(n.path)\n\t\t\t\t\t\t\tcontinue walk\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\
    \t\t\t\t}\n\t\t\t}\n\n\t\t\t// Nothing found. We can recommend to redirect to\
    \ the same URL\n\t\t\t// without a trailing slash if a leaf exists for that path\n\
    \t\t\tif fixTrailingSlash && path == \"/\" && n.handlers != nil {\n\t\t\t\treturn\
    \ ciPath\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\t\tn = n.children[0]\n\t\tswitch\
    \ n.nType {\n\t\tcase param:\n\t\t\t// Find param end (either '/' or path end)\n\
    \t\t\tend := 0\n\t\t\tfor end < len(path) && path[end] != '/' {\n\t\t\t\tend++\n\
    \t\t\t}\n\n\t\t\t// Add param value to case insensitive path\n\t\t\tciPath = append(ciPath,\
    \ path[:end]...)\n\n\t\t\t// We need to go deeper!\n\t\t\tif end < len(path) {\n\
    \t\t\t\tif len(n.children) > 0 {\n\t\t\t\t\t// Continue with child node\n\t\t\t\
    \t\tn = n.children[0]\n\t\t\t\t\tnpLen = len(n.path)\n\t\t\t\t\tpath = path[end:]\n\
    \t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\t// ... but we can't\n\t\t\t\tif fixTrailingSlash\
    \ && len(path) == end+1 {\n\t\t\t\t\treturn ciPath\n\t\t\t\t}\n\t\t\t\treturn\
    \ nil\n\t\t\t}\n\n\t\t\tif n.handlers != nil {\n\t\t\t\treturn ciPath\n\t\t\t\
    }\n\n\t\t\tif fixTrailingSlash && len(n.children) == 1 {\n\t\t\t\t// No handle\
    \ found. Check if a handle for this path + a\n\t\t\t\t// trailing slash exists\n\
    \t\t\t\tn = n.children[0]\n\t\t\t\tif n.path == \"/\" && n.handlers != nil {\n\
    \t\t\t\t\treturn append(ciPath, '/')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nil\n\
    \n\t\tcase catchAll:\n\t\t\treturn append(ciPath, path...)\n\n\t\tdefault:\n\t\
    \t\tpanic(\"invalid node type\")\n\t\t}\n\t}\n\n\t// Nothing found.\n\t// Try\
    \ to fix the path by adding / removing a trailing slash\n\tif fixTrailingSlash\
    \ {\n\t\tif path == \"/\" {\n\t\t\treturn ciPath\n\t\t}\n\t\tif len(path)+1 ==\
    \ npLen && n.path[len(path)] == '/' &&\n\t\t\tstrings.EqualFold(path[1:], n.path[1:len(path)])\
    \ && n.handlers != nil {\n\t\t\treturn append(ciPath, n.path...)\n\t\t}\n\t}\n\
    \treturn nil\n}\n\n### Source File Dependency Files Content\n### Dependency File:\
    \ gin\\tree_test.go\\dependent_files\\bytesconv.go\n// Copyright 2023 Gin Core\
    \ Team. All rights reserved.\n// Use of this source code is governed by a MIT\
    \ style\n// license that can be found in the LICENSE file.\n\npackage bytesconv\n\
    \nimport (\n\t\"unsafe\"\n)\n\n// StringToBytes converts string to byte slice\
    \ without a memory allocation.\n// For more details, see https://github.com/golang/go/issues/53003#issuecomment-1140276077.\n\
    func StringToBytes(s string) []byte {\n\treturn unsafe.Slice(unsafe.StringData(s),\
    \ len(s))\n}\n\n// BytesToString converts byte slice to string without a memory\
    \ allocation.\n// For more details, see https://github.com/golang/go/issues/53003#issuecomment-1140276077.\n\
    func BytesToString(b []byte) string {\n\treturn unsafe.String(unsafe.SliceData(b),\
    \ len(b))\n}\n\nOutput the complete test file, code only, no explanations.\n###\
    \ Time\nCurrent time: 2025-03-23 23:54:17\n"
  role: user
